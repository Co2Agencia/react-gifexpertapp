{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAhBvB,SAAAP,GACrBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,gDAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,6BAAMA,Q,uBCLLK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACH,mCACVN,EAFa,iDAEoCO,UAAUF,GAF9C,6BACH,oCADG,SAIAG,MAAOR,GAJP,cAIbS,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,YAAK,CAC3BhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXnB,kBAcZY,GAdY,4CAAH,sDCEPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAdAC,qBAAW,WAEPjB,EAAQC,GACHiB,MAAK,SAAAC,GAEFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAKtB,CAAEb,IAEEc,EDnB0BK,CAAanB,GAAjCU,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAGrB,OACI,gCACI,6BAAMb,IAEJa,GAAW,mBAAGjB,UAAU,mCAAb,0BAEb,qBAAKA,UAAU,aAAf,SAEQc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAAiCA,GAAdA,EAAIhB,aEUhC2B,EAtBM,WAEjB,MAAoCzC,mBAAU,CAAC,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWb,KAAK,SAACR,EAAUsB,GAAX,OACZ,cAAC,EAAD,CAAStB,SAAWA,GAAiBA,Y,MCbzDuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bcb4a847.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    \r\n    const handeInputChange = e => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cat => [ inputValue, ...cat,] )\r\n            setInputValue(\"\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <input type=\"text\" value={ inputValue } onChange={ handeInputChange } />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className=\"lista-gif animate__animated animate__fadeInUp\">\r\n            <img src={url} alt={title}/>\r\n            <h3>{ title }</h3>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const api_key = \"MGpYxqSwslK0NjG8lIzRPm0eVHHBfnlb\"\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ api_key }`\r\n\r\n    const resp = await fetch( url );\r\n\r\n    const { data } = await resp.json()\r\n    \r\n    const gifs = data.map( img => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n    }) )\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category)\r\n\r\n    // getGifs() // Ahora se ejecuta con useEffect\r\n    return (\r\n        <div>\r\n            <h3>{ category }</h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\"> Cargando.. </p> }\r\n\r\n            <div className=\"lista-gifs\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem key={ img.id } { ...img }/>\r\n                    ))\r\n                }\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    \r\n    useEffect( () => {\r\n        \r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                })\r\n\r\n            })\r\n\r\n    }, [ category ] )\r\n\r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n// import PropTypes from 'prop-types'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState( ['One Punch'] )\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr></hr>\r\n\r\n            <ol>\r\n            {\r\n                categories.map( (category, i) =>\r\n                    <GifGrid category={ category } key={ category } />\r\n                )\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}